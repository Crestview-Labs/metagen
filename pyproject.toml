[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metagen"
version = "0.1.0"
description = "Superintelligent personal agents with memory, tools, and MCP integration"
requires-python = ">=3.12"
dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    # LLM clients
    "anthropic>=0.54.0",
    "openai>=1.86.0",
    "instructor>=1.9.0",
    "google-genai>=1.23.0",
    # MCP protocol
    "mcp[cli]>=1.9.4",
    # Memory/Storage
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "aiosqlite>=0.19.0",
    "greenlet>=3.0.0",
    # Async utilities
    "asyncio>=3.4.3",
    "aiofiles>=23.2.0",
    # CLI
    "rich>=14.0.0",
    "prompt-toolkit>=3.0.51",
    "aiohttp>=3.12.13",
    # FastAPI server
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
    # Utilities
    "python-dateutil>=2.8.0",
    "httpx>=0.25.0",
    # OpenTelemetry observability
    "opentelemetry-api>=1.24.0",
    "opentelemetry-sdk>=1.24.0",
    "opentelemetry-instrumentation>=0.45b0",
    "opentelemetry-exporter-otlp>=1.24.0",
    "opentelemetry-instrumentation-fastapi>=0.45b0",
    "opentelemetry-instrumentation-httpx>=0.45b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.45b0",
    "opentelemetry-instrumentation-asyncio>=0.45b0",
    # Google API integration
    "google-api-python-client>=2.172.0",
    "google-auth>=2.40.3",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.2",
    "pytest-asyncio>=1.0.0",
    "sqlmodel>=0.0.24",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.17.0",
    "diskcache>=5.6.3",
    "jsonref>=1.1.0",
]

[project.scripts]
metagen = "metagen.cli:main"

[tool.setuptools.packages.find]
include = ["metagen*"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "**/*.ipynb",
    "packages",  # TypeScript packages
    "bundle",    # Bundled output
]

# Same as current settings
line-length = 100
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    "E4",
    "E7",
    "E9",
    "E501",
    "F",
    "F401",
    "I",      # check that imports are sorted
    "UP006",  # use list[T] instead of typing.List[T]
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
# Configure import sorting
split-on-trailing-comma = false
combine-as-imports = false
force-single-line = false
known-first-party = ["metagen", "agents", "api", "auth", "client", "connectors", "memory", "tools"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = true

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in docstrings.
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "packages/.*",  # TypeScript code
    "bundle/.*",    # Bundled output
]

[[tool.mypy.overrides]]
module = "db.alembic.versions.*"
ignore_errors = true

[tool.black]
line-length = 100
target-version = ["py312"]


[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-timeout>=2.4.0",
]
