"""Initial schema

Revision ID: 0b97d6f2e6b7
Revises:
Create Date: 2025-08-03 19:59:45.870860

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0b97d6f2e6b7"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "compact_memories",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=False),
        sa.Column("task_ids", sa.JSON(), nullable=True),
        sa.Column("summary", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("key_points", sa.JSON(), nullable=True),
        sa.Column("entities", sa.JSON(), nullable=True),
        sa.Column("semantic_labels", sa.JSON(), nullable=True),
        sa.Column("turn_count", sa.Integer(), nullable=True),
        sa.Column("token_count", sa.Integer(), nullable=True),
        sa.Column("compressed_token_count", sa.Integer(), nullable=True),
        sa.Column("processed", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_compact_memories_time_range",
        "compact_memories",
        ["start_time", "end_time"],
        unique=False,
    )
    op.create_index(
        op.f("ix_compact_memories_end_time"), "compact_memories", ["end_time"], unique=False
    )
    op.create_index(
        op.f("ix_compact_memories_processed"), "compact_memories", ["processed"], unique=False
    )
    op.create_index(
        op.f("ix_compact_memories_start_time"), "compact_memories", ["start_time"], unique=False
    )
    op.create_table(
        "conversation_turns",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("agent_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("turn_number", sa.Integer(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("source_entity", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("target_entity", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("conversation_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_query", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("agent_response", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("task_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("llm_context", sa.JSON(), nullable=True),
        sa.Column("tools_used", sa.Boolean(), nullable=False),
        sa.Column("total_duration_ms", sa.Float(), nullable=True),
        sa.Column("llm_duration_ms", sa.Float(), nullable=True),
        sa.Column("tools_duration_ms", sa.Float(), nullable=True),
        sa.Column("user_metadata", sa.JSON(), nullable=True),
        sa.Column("agent_metadata", sa.JSON(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("IN_PROGRESS", "COMPLETED", "ERROR", "PARTIAL", "ABANDONED", name="turnstatus"),
            nullable=False,
        ),
        sa.Column("error_details", sa.JSON(), nullable=True),
        sa.Column("compacted", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_turns_agent_number", "conversation_turns", ["agent_id", "turn_number"], unique=False
    )
    op.create_index(
        "idx_turns_agent_time", "conversation_turns", ["agent_id", "timestamp"], unique=False
    )
    op.create_index(
        "idx_turns_agent_turn_unique",
        "conversation_turns",
        ["agent_id", "turn_number"],
        unique=True,
    )
    op.create_index("idx_turns_compacted", "conversation_turns", ["compacted"], unique=False)
    op.create_index(
        "idx_turns_conversation_type", "conversation_turns", ["conversation_type"], unique=False
    )
    op.create_index(
        "idx_turns_source_entity", "conversation_turns", ["source_entity"], unique=False
    )
    op.create_index(
        "idx_turns_target_entity", "conversation_turns", ["target_entity"], unique=False
    )
    op.create_index(
        op.f("ix_conversation_turns_agent_id"), "conversation_turns", ["agent_id"], unique=False
    )
    op.create_index(
        op.f("ix_conversation_turns_task_id"), "conversation_turns", ["task_id"], unique=False
    )
    op.create_index(
        op.f("ix_conversation_turns_timestamp"), "conversation_turns", ["timestamp"], unique=False
    )
    op.create_table(
        "long_term_memories",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("task_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_long_term_memories_created_at", "long_term_memories", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_long_term_memories_task_id"), "long_term_memories", ["task_id"], unique=False
    )
    op.create_table(
        "task_configs",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("definition", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_configs_name"), "task_configs", ["name"], unique=False)
    op.create_table(
        "telemetry_spans",
        sa.Column("span_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("trace_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("parent_span_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("service_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("start_time", sa.Float(), nullable=False),
        sa.Column("end_time", sa.Float(), nullable=True),
        sa.Column("duration_ms", sa.Float(), nullable=True),
        sa.Column("attributes", sa.JSON(), nullable=True),
        sa.Column("events", sa.JSON(), nullable=True),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("span_id"),
    )
    op.create_index("idx_telemetry_name", "telemetry_spans", ["name"], unique=False)
    op.create_index("idx_telemetry_start_time", "telemetry_spans", ["start_time"], unique=False)
    op.create_index("idx_telemetry_trace_id", "telemetry_spans", ["trace_id"], unique=False)
    op.create_index(op.f("ix_telemetry_spans_name"), "telemetry_spans", ["name"], unique=False)
    op.create_index(
        op.f("ix_telemetry_spans_start_time"), "telemetry_spans", ["start_time"], unique=False
    )
    op.create_index(
        op.f("ix_telemetry_spans_trace_id"), "telemetry_spans", ["trace_id"], unique=False
    )
    op.create_table(
        "tool_usage",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("turn_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("agent_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tool_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("tool_args", sa.JSON(), nullable=True),
        sa.Column("tool_call_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("requires_approval", sa.Boolean(), nullable=False),
        sa.Column("user_decision", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("user_feedback", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("decision_timestamp", sa.DateTime(), nullable=True),
        sa.Column("execution_started_at", sa.DateTime(), nullable=True),
        sa.Column("execution_completed_at", sa.DateTime(), nullable=True),
        sa.Column("execution_status", sa.String(), nullable=True),
        sa.Column("execution_result", sa.JSON(), nullable=True),
        sa.Column("execution_error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("duration_ms", sa.Float(), nullable=True),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["turn_id"], ["conversation_turns.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_tool_usage_created", "tool_usage", ["created_at"], unique=False)
    op.create_index(op.f("ix_tool_usage_agent_id"), "tool_usage", ["agent_id"], unique=False)
    op.create_index(
        op.f("ix_tool_usage_execution_status"), "tool_usage", ["execution_status"], unique=False
    )
    op.create_index(op.f("ix_tool_usage_tool_name"), "tool_usage", ["tool_name"], unique=False)
    op.create_index(op.f("ix_tool_usage_turn_id"), "tool_usage", ["turn_id"], unique=False)
    op.create_index(
        op.f("ix_tool_usage_user_decision"), "tool_usage", ["user_decision"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tool_usage_user_decision"), table_name="tool_usage")
    op.drop_index(op.f("ix_tool_usage_turn_id"), table_name="tool_usage")
    op.drop_index(op.f("ix_tool_usage_tool_name"), table_name="tool_usage")
    op.drop_index(op.f("ix_tool_usage_execution_status"), table_name="tool_usage")
    op.drop_index(op.f("ix_tool_usage_agent_id"), table_name="tool_usage")
    op.drop_index("idx_tool_usage_created", table_name="tool_usage")
    op.drop_table("tool_usage")
    op.drop_index(op.f("ix_telemetry_spans_trace_id"), table_name="telemetry_spans")
    op.drop_index(op.f("ix_telemetry_spans_start_time"), table_name="telemetry_spans")
    op.drop_index(op.f("ix_telemetry_spans_name"), table_name="telemetry_spans")
    op.drop_index("idx_telemetry_trace_id", table_name="telemetry_spans")
    op.drop_index("idx_telemetry_start_time", table_name="telemetry_spans")
    op.drop_index("idx_telemetry_name", table_name="telemetry_spans")
    op.drop_table("telemetry_spans")
    op.drop_index(op.f("ix_task_configs_name"), table_name="task_configs")
    op.drop_table("task_configs")
    op.drop_index(op.f("ix_long_term_memories_task_id"), table_name="long_term_memories")
    op.drop_index("idx_long_term_memories_created_at", table_name="long_term_memories")
    op.drop_table("long_term_memories")
    op.drop_index(op.f("ix_conversation_turns_timestamp"), table_name="conversation_turns")
    op.drop_index(op.f("ix_conversation_turns_task_id"), table_name="conversation_turns")
    op.drop_index(op.f("ix_conversation_turns_agent_id"), table_name="conversation_turns")
    op.drop_index("idx_turns_target_entity", table_name="conversation_turns")
    op.drop_index("idx_turns_source_entity", table_name="conversation_turns")
    op.drop_index("idx_turns_conversation_type", table_name="conversation_turns")
    op.drop_index("idx_turns_compacted", table_name="conversation_turns")
    op.drop_index("idx_turns_agent_turn_unique", table_name="conversation_turns")
    op.drop_index("idx_turns_agent_time", table_name="conversation_turns")
    op.drop_index("idx_turns_agent_number", table_name="conversation_turns")
    op.drop_table("conversation_turns")
    op.drop_index(op.f("ix_compact_memories_start_time"), table_name="compact_memories")
    op.drop_index(op.f("ix_compact_memories_processed"), table_name="compact_memories")
    op.drop_index(op.f("ix_compact_memories_end_time"), table_name="compact_memories")
    op.drop_index("idx_compact_memories_time_range", table_name="compact_memories")
    op.drop_table("compact_memories")
    # ### end Alembic commands ###
