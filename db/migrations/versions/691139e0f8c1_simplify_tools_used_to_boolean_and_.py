"""Simplify tools_used to boolean and remove tool_results

Revision ID: 691139e0f8c1
Revises: 0ca1334ac434
Create Date: 2025-07-20 13:51:00.494019

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = "691139e0f8c1"
down_revision: Union[str, Sequence[str], None] = "0ca1334ac434"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if table exists before trying to drop it
    bind = op.get_bind()
    inspector = sa.inspect(bind)

    if "telemetry_spans" in inspector.get_table_names():
        op.drop_index(op.f("idx_telemetry_name"), table_name="telemetry_spans")
        op.drop_index(op.f("idx_telemetry_start_time"), table_name="telemetry_spans")
        op.drop_index(op.f("idx_telemetry_trace_id"), table_name="telemetry_spans")
        op.drop_table("telemetry_spans")

    # Truncate the data since we're changing column types
    op.execute("DELETE FROM conversation_turns")
    op.execute("DELETE FROM tool_usage")

    # SQLite requires batch mode for column alterations
    with op.batch_alter_table("conversation_turns") as batch_op:
        batch_op.alter_column(
            "tools_used",
            existing_type=sqlite.JSON(),
            type_=sa.Boolean(),
            nullable=False,
            server_default="0",
        )
        batch_op.drop_column("tool_results")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("conversation_turns", sa.Column("tool_results", sqlite.JSON(), nullable=True))
    op.alter_column(
        "conversation_turns",
        "tools_used",
        existing_type=sa.Boolean(),
        type_=sqlite.JSON(),
        nullable=True,
    )
    op.create_table(
        "telemetry_spans",
        sa.Column("span_id", sa.TEXT(), nullable=True),
        sa.Column("trace_id", sa.TEXT(), nullable=False),
        sa.Column("parent_span_id", sa.TEXT(), nullable=True),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("service_name", sa.TEXT(), nullable=True),
        sa.Column("start_time", sa.REAL(), nullable=False),
        sa.Column("end_time", sa.REAL(), nullable=True),
        sa.Column("duration_ms", sa.REAL(), nullable=True),
        sa.Column("attributes", sa.TEXT(), nullable=True),
        sa.Column("events", sa.TEXT(), nullable=True),
        sa.Column("status", sa.TEXT(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("span_id"),
    )
    op.create_index(op.f("idx_telemetry_trace_id"), "telemetry_spans", ["trace_id"], unique=False)
    op.create_index(
        op.f("idx_telemetry_start_time"), "telemetry_spans", ["start_time"], unique=False
    )
    op.create_index(op.f("idx_telemetry_name"), "telemetry_spans", ["name"], unique=False)
    # ### end Alembic commands ###
