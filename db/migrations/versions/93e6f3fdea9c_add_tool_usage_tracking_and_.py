"""add tool usage tracking and conversation enhancements

Revision ID: 93e6f3fdea9c
Revises: 50f66b6cd363
Create Date: 2025-07-19 19:03:34.775657

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "93e6f3fdea9c"
down_revision: Union[str, Sequence[str], None] = "50f66b6cd363"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tool_usage",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("turn_id", sa.String(), nullable=False),
        sa.Column("entity_id", sa.String(), nullable=False),
        sa.Column("tool_name", sa.String(), nullable=False),
        sa.Column("tool_args", sa.JSON(), nullable=False),
        sa.Column("requires_approval", sa.Boolean(), nullable=False),
        sa.Column("user_decision", sa.String(), nullable=True),
        sa.Column("user_feedback", sa.Text(), nullable=True),
        sa.Column("decision_timestamp", sa.DateTime(), nullable=True),
        sa.Column("execution_started_at", sa.DateTime(), nullable=True),
        sa.Column("execution_completed_at", sa.DateTime(), nullable=True),
        sa.Column("execution_status", sa.String(), nullable=True),
        sa.Column("execution_result", sa.JSON(), nullable=True),
        sa.Column("execution_error", sa.Text(), nullable=True),
        sa.Column("duration_ms", sa.Float(), nullable=True),
        sa.Column("tokens_used", sa.Integer(), nullable=True),
        sa.Column("trace_id", sa.String(length=32), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_tool_usage_created", "tool_usage", ["created_at"], unique=False)
    op.create_index("idx_tool_usage_decision", "tool_usage", ["user_decision"], unique=False)
    op.create_index("idx_tool_usage_entity", "tool_usage", ["entity_id"], unique=False)
    op.create_index("idx_tool_usage_name", "tool_usage", ["tool_name"], unique=False)
    op.create_index("idx_tool_usage_status", "tool_usage", ["execution_status"], unique=False)
    op.create_index("idx_tool_usage_turn", "tool_usage", ["turn_id"], unique=False)
    # Add columns as nullable first
    op.add_column("conversation_turns", sa.Column("source_entity", sa.String(), nullable=True))
    op.add_column("conversation_turns", sa.Column("target_entity", sa.String(), nullable=True))
    op.add_column("conversation_turns", sa.Column("conversation_type", sa.String(), nullable=True))

    # Backfill existing data
    op.execute("""
        UPDATE conversation_turns 
        SET source_entity = 'USER',
            target_entity = agent_id,
            conversation_type = 'USER_AGENT'
        WHERE agent_id IS NOT NULL
    """)

    # Now make them non-nullable
    with op.batch_alter_table("conversation_turns") as batch_op:
        batch_op.alter_column("source_entity", nullable=False)
        batch_op.alter_column("target_entity", nullable=False)
        batch_op.alter_column("conversation_type", nullable=False)
    op.create_index(
        "idx_turns_conversation_type", "conversation_turns", ["conversation_type"], unique=False
    )
    op.create_index(
        "idx_turns_source_entity", "conversation_turns", ["source_entity"], unique=False
    )
    op.create_index(
        "idx_turns_target_entity", "conversation_turns", ["target_entity"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_turns_target_entity", table_name="conversation_turns")
    op.drop_index("idx_turns_source_entity", table_name="conversation_turns")
    op.drop_index("idx_turns_conversation_type", table_name="conversation_turns")
    with op.batch_alter_table("conversation_turns") as batch_op:
        batch_op.drop_column("conversation_type")
        batch_op.drop_column("target_entity")
        batch_op.drop_column("source_entity")
    op.drop_index("idx_tool_usage_turn", table_name="tool_usage")
    op.drop_index("idx_tool_usage_status", table_name="tool_usage")
    op.drop_index("idx_tool_usage_name", table_name="tool_usage")
    op.drop_index("idx_tool_usage_entity", table_name="tool_usage")
    op.drop_index("idx_tool_usage_decision", table_name="tool_usage")
    op.drop_index("idx_tool_usage_created", table_name="tool_usage")
    op.drop_table("tool_usage")
    # ### end Alembic commands ###
